<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_686164_new_yea_0.selfReportQueryService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>selfReportQueryService</name>
        <script><![CDATA[var selfReportQueryService = Class.create();
selfReportQueryService.prototype = {
    initialize: function() {},

    updateStatusData: function(table, sysID, returnFields) {
        var output = {};
        var labelWithValues = [];
        var description = '';
        var glideObject = new GlideRecord(table);
        glideObject.get(sysID);

        labelWithValues.push({
            "label": gs.getMessage("Emergency start"),
            "value": {
                "type": "string",
                "value": glideObject.getDisplayValue("start_date")
            }
        });
        labelWithValues.push({
            "label": gs.getMessage("Emergency"),
            "value": {
                "type": "string",
                "value": glideObject.getDisplayValue("type_of_emergency")
            }
        });
        labelWithValues.push({
            "label": gs.getMessage("Location"),
            "value": {
                "type": "string",
                "value": glideObject.name.location.getDisplayValue()
            }
        });
        labelWithValues.push({
            "label": gs.getMessage("Manager"),
            "value": {
                "type": "string",
                "value": glideObject.name.manager.getDisplayValue()
            }
        });
        description = (glideObject.emergency_details.toString()).replace(/\n/g, '<br/>');
        output['sidebarContent'] = labelWithValues;
        output['description'] = description || '';
        return output;
    },

    alertQueryService: function() {
        var output = {};
		var message1 = gs.getMessage("Need to report an emergency or request sick time?");
		var message2 = gs.getMessage("Create a new status report to get started.");
		var finalMessage = "<p>" + message1 + "</p><p>" + message2 + "</p>";
		output['rich_text_need_attention'] = finalMessage;
        var loggedInUser = gs.getUserID();
        var gr = new GlideRecord('x_686164_new_yea_0_status_report');
        gr.addQuery('name', loggedInUser);
        gr.addQuery('status', 'status_requested');
        gr.orderByDesc('sys_updated_on');
        gr.query();
        if (gr.next()) {
            var href = ["updatereport/x_686164_new_yea_0_status_report/", gr.sys_id].join('');
            output['action'] = {
                "type": "open",
                "href": href,
                "label": gs.getMessage("Update status")
            };
            output['invisible'] = false;
        } else {
            output['invisible'] = true;
            output['action'] = null;
        }
        output['newAlertInvisible'] = true;
        output['newAlertAction'] = null;
        var alerts = new GlideRecord('x_686164_new_yea_0_emergency_alert');
        alerts.addActiveQuery();
        alerts.orderByDesc('sys_updated_on');
        alerts.query();

        while (alerts.next()) {
            var recordURL = ["emergency-information/x_686164_new_yea_0_emergency_alert/", alerts.sys_id, "/", alerts.kb_article].join('');
            var readUsers = (alerts.list_of_read_users).toString();
            if (readUsers.indexOf(loggedInUser) == -1) {
                output['newAlertInvisible'] = false;
                output['newAlertAction'] = {
                    "type": "open",
                    "href": recordURL,
                    "label": gs.getMessage("Read")
                };
                break;
            }
        }
        return output;
    },

    checkSelfReportsCreated: function(current) {
        var othersAffected = current.who_else_was_affected;
        var staRepReq = new GlideRecord('x_686164_new_yea_0_status_report_requests');
        staRepReq.addQuery('self_report', current.sys_id);
        staRepReq.query();
        if (staRepReq.next()) {
            var staRep = new GlideRecord('x_686164_new_yea_0_status_report');
            staRep.addQuery('status_report_request', staRepReq.sys_id);
            staRep.addQuery('name.sys_id', 'IN', othersAffected);
            staRep.query();
            return staRep.getRowCount() != othersAffected.split(',').length;
        } else {
            return true;
        }
    },

    checkWorkRequestStatus: function(current) {
		/* On Self report condition for Approve/Reject buttons display */
        var workStatusReq = new GlideRecord('x_686164_new_yea_0_work_status_request_task');
        workStatusReq.addQuery('self_report', current.sys_id);
        workStatusReq.addQuery('state', 'Requested');
        if (gs.getUser().hasRole('x_686164_new_yea_0.emergency_alert_manager')) {
            workStatusReq.addQuery('assigned_to', gs.getUserID());
        } else if (gs.getUser().hasRole('x_686164_new_yea_0.emergency_alert_admin')) {
            workStatusReq.addNotNullQuery('sys_id');
        } else {
            workStatusReq.addNullQuery('sys_id');
        }
        workStatusReq.query();
        if (workStatusReq.getRowCount() > 0) {
            return 'true';
        } else {
            return 'false';
        }
    },
	
	checkWorkRequestStatus1: function(current) {
		/* On Work status task condition for Approve/Reject buttons display */
        var workStatusReq = new GlideRecord('x_686164_new_yea_0_work_status_request_task');
		workStatusReq.addQuery('sys_id',current.sys_id);
        workStatusReq.addQuery('state', 'Requested');
        if (gs.getUser().hasRole('x_686164_new_yea_0.emergency_alert_manager')) {
            workStatusReq.addQuery('assigned_to', gs.getUserID());
        } else if (gs.getUser().hasRole('x_686164_new_yea_0.emergency_alert_admin')) {
            workStatusReq.addNotNullQuery('sys_id');
        } else {
            workStatusReq.addNullQuery('sys_id');
        }
        workStatusReq.query();
        if (workStatusReq.getRowCount() > 0) {
            return 'true';
        } else {
            return 'false';
        }
    },
		
    type: 'selfReportQueryService'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-27 02:01:15</sys_created_on>
        <sys_id>93da19e279ec0210195bcffe74914e78</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>selfReportQueryService</sys_name>
        <sys_package display_value="New Year 2002 FireDrill" source="x_686164_new_yea_0">b6dad5e279ec0210b6e99ef119a29f1d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="New Year 2002 FireDrill">b6dad5e279ec0210b6e99ef119a29f1d</sys_scope>
        <sys_update_name>sys_script_include_93da19e279ec0210195bcffe74914e78</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-02-27 02:01:15</sys_updated_on>
    </sys_script_include>
</record_update>
